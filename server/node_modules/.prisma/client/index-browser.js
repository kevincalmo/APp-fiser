
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AnomalyScalarFieldEnum = {
  id: 'id',
  way_id: 'way_id',
  date: 'date',
  type: 'type',
  is_collected: 'is_collected',
  regularization_date: 'regularization_date',
  description: 'description',
  report_id: 'report_id',
  manual_town: 'manual_town',
  manual_way: 'manual_way',
  manual_flux: 'manual_flux',
  manual_truck: 'manual_truck',
  type_anomaly_id: 'type_anomaly_id'
};

exports.Prisma.CircuitScalarFieldEnum = {
  id: 'id',
  default_outlet_id: 'default_outlet_id',
  name: 'name'
};

exports.Prisma.CollecteScalarFieldEnum = {
  id: 'id',
  date: 'date',
  observation: 'observation',
  is_valid: 'is_valid'
};

exports.Prisma.Collecte_observationScalarFieldEnum = {
  id: 'id',
  collecte_id: 'collecte_id',
  description: 'description'
};

exports.Prisma.Container_mouvementScalarFieldEnum = {
  id: 'id',
  worksite_id: 'worksite_id',
  driver_id: 'driver_id',
  truck_id: 'truck_id',
  flux_id: 'flux_id',
  outlet_id: 'outlet_id',
  description: 'description',
  tonnage: 'tonnage',
  operation_type_id: 'operation_type_id',
  container_type_id: 'container_type_id',
  date: 'date'
};

exports.Prisma.Container_typeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Doctrine_migration_versionsScalarFieldEnum = {
  version: 'version',
  executed_at: 'executed_at',
  execution_time: 'execution_time'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  last_name: 'last_name',
  first_name: 'first_name',
  type: 'type'
};

exports.Prisma.FluxScalarFieldEnum = {
  id: 'id',
  name: 'name',
  circuit_id: 'circuit_id'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.Messenger_messagesScalarFieldEnum = {
  id: 'id',
  body: 'body',
  headers: 'headers',
  queue_name: 'queue_name',
  created_at: 'created_at',
  available_at: 'available_at',
  delivered_at: 'delivered_at'
};

exports.Prisma.Operation_typeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.OutletScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Replacement_teamScalarFieldEnum = {
  id: 'id',
  substitute_driver_id: 'substitute_driver_id',
  substitute_ripper1_id: 'substitute_ripper1_id',
  substitute_ripper2_id: 'substitute_ripper2_id'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  default_outlet_id: 'default_outlet_id',
  visited_outlet_id: 'visited_outlet_id',
  flux_id: 'flux_id',
  truck_id: 'truck_id',
  date: 'date',
  manual_circuit: 'manual_circuit',
  total_bac_collected: 'total_bac_collected',
  total_bac_rejected: 'total_bac_rejected',
  tonnage: 'tonnage',
  tonnage2: 'tonnage2',
  default_outlet2_id: 'default_outlet2_id',
  visited_outlet2_id: 'visited_outlet2_id',
  default_outlet3_id: 'default_outlet3_id',
  visited_outlet3_id: 'visited_outlet3_id',
  default_outlet4_id: 'default_outlet4_id',
  visited_outlet4_id: 'visited_outlet4_id',
  tonnage3: 'tonnage3',
  tonnage4: 'tonnage4',
  circuit_id: 'circuit_id',
  collecte_id: 'collecte_id',
  observation: 'observation',
  geoloc_id: 'geoloc_id'
};

exports.Prisma.RipperScalarFieldEnum = {
  id: 'id',
  last_name: 'last_name',
  first_name: 'first_name'
};

exports.Prisma.SinisterScalarFieldEnum = {
  id: 'id',
  truck_id: 'truck_id',
  driver_id: 'driver_id',
  date: 'date',
  place: 'place',
  opposing_vehicule: 'opposing_vehicule',
  opposing_driver: 'opposing_driver',
  circumstance: 'circumstance',
  status: 'status',
  observation: 'observation'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TabletScalarFieldEnum = {
  id: 'id',
  label: 'label'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  driver_id: 'driver_id',
  flux_id: 'flux_id',
  ripper1_id: 'ripper1_id',
  ripper2_id: 'ripper2_id',
  truck_id: 'truck_id',
  replacement_team_id: 'replacement_team_id',
  name: 'name',
  manual_circuit: 'manual_circuit',
  manual_tablet: 'manual_tablet'
};

exports.Prisma.TownScalarFieldEnum = {
  id: 'id',
  circuit_id: 'circuit_id',
  name: 'name',
  postal_code: 'postal_code'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TruckScalarFieldEnum = {
  id: 'id',
  registration: 'registration',
  type: 'type'
};

exports.Prisma.Type_anomalyScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  roles: 'roles',
  password: 'password',
  refresh_token: 'refresh_token'
};

exports.Prisma.WayScalarFieldEnum = {
  id: 'id',
  town_id: 'town_id',
  name: 'name',
  type: 'type'
};

exports.Prisma.WorksiteScalarFieldEnum = {
  id: 'id',
  town_id: 'town_id',
  name: 'name',
  adress: 'adress'
};


exports.Prisma.ModelName = {
  anomaly: 'anomaly',
  circuit: 'circuit',
  collecte: 'collecte',
  collecte_observation: 'collecte_observation',
  container_mouvement: 'container_mouvement',
  container_type: 'container_type',
  doctrine_migration_versions: 'doctrine_migration_versions',
  driver: 'driver',
  flux: 'flux',
  messenger_messages: 'messenger_messages',
  operation_type: 'operation_type',
  outlet: 'outlet',
  replacement_team: 'replacement_team',
  report: 'report',
  ripper: 'ripper',
  sinister: 'sinister',
  tablet: 'tablet',
  team: 'team',
  town: 'town',
  truck: 'truck',
  type_anomaly: 'type_anomaly',
  user: 'user',
  way: 'way',
  worksite: 'worksite'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
